
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'jabirali/tmux-tilish'
set -g @plugin 'arcticicestudio/nord-tmux'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/vim-tmux'

set -g default-shell /bin/zsh
set -g default-terminal "xterm-256color"
set-option -sa terminal-overrides ",xterm*:Tc"
setw -g mode-keys vi
set -g mouse on
set -g base-index 1
setw -g pane-base-index 1
set -sg escape-time 0

# bindings
set-option -g prefix C-Space
bind-key C-Space send-prefix
bind Escape copy-mode

bind-key -T copy-mode-vi v send-keys -X begin-selection

# Keybindings for controlling the Status Bar
bind-key a { set-option status on }
bind-key A { set-option status off }
bind-key i { set-option status-position top }
bind-key u { set-option status-position bottom }

# "plugin code"
# start tilish <https://github.com/jabirali/tmux-tilish/>
legacy="$(tmux -V | grep -E 'tmux (1\.|2\.[0-6])')"

# Read user options.
for opt in default dmenu easymode navigate navigator prefix shiftnum
do
  export "$opt"="$(tmux show-option -gv @tilish-"$opt" 2>/dev/null)"
done

# Default to US keyboard layout, unless something is configured.
if [ -z "$shiftnum" ]
then
  shiftnum='!@#$%^&*()'
fi

# Determine "arrow types".
if [ "${easymode:-}" = "on" ]
then
  # Simplified arrows.
  h='left';   j='down';   k='up';   l='right';
  H='S-left'; J='S-down'; K='S-up'; L='S-right';
else
  # Vim-style arrows.
  h='h'; j='j'; k='k'; l='l';
  H='H'; J='J'; K='K'; L='L';
fi

if [ -z "${prefix:-}" ]
then
  bind='bind -n'
  mod='M-'
else
  bind='bind -rT tilish'
  mod=''
fi

# Define core functionality {{{
bind_switch () {
	# Bind keys to switch between workspaces.
	tmux $bind "$1" \
		if-shell "tmux select-window -t :$2" "" "new-window -t :$2"
}

bind_move () {
	# Bind keys to move panes between workspaces.
	if [ -z "$legacy" ]
	then
		tmux $bind "$1" \
			if-shell "tmux join-pane -t :$2" \
				"" \
				"new-window -dt :$2; join-pane -t :$2; select-pane -t top-left; kill-pane" \\\;\
			select-layout \\\;\
			select-layout -E
	else
		tmux $bind "$1" \
			if-shell "tmux new-window -dt :$2" \
				"join-pane -t :$2; select-pane -t top-left; kill-pane" \
				"send escape; join-pane -t :$2" \\\;\
			select-layout
	fi
}

bind_layout () {
	# Bind keys to switch or refresh layouts.
	if [ "$2" = "zoom" ]
	then
		# Invoke the zoom feature.
		tmux $bind "$1" \
			resize-pane -Z
	else
		# Actually switch layout.
		if [ -z "$legacy" ]
		then
			tmux $bind "$1" \
				select-layout "$2" \\\;\
				select-layout -E
		else
			tmux $bind "$1" \
				run-shell "tmux select-layout \"$2\"" \\\;\
				send escape
		fi
	fi
}

char_at () {
	# Finding the character at a given position in
	# a string in a way compatible with POSIX sh.
	echo $1 | cut -c $2
}
# }}}

# Define keybindings {{{
# Define a prefix key.
if [ -n "$prefix" ]
then
	tmux bind -n "$prefix" switch-client -T tilish
fi

# Switch to workspace via Alt + #.
bind_switch "${mod}1" 1
bind_switch "${mod}2" 2
bind_switch "${mod}3" 3
bind_switch "${mod}4" 4
bind_switch "${mod}5" 5
bind_switch "${mod}6" 6
bind_switch "${mod}7" 7
bind_switch "${mod}8" 8
bind_switch "${mod}9" 9

# Move pane to workspace via Alt + Shift + #.
bind_move "${mod}$(char_at $shiftnum 1)" 1
bind_move "${mod}$(char_at $shiftnum 2)" 2
bind_move "${mod}$(char_at $shiftnum 3)" 3
bind_move "${mod}$(char_at $shiftnum 4)" 4
bind_move "${mod}$(char_at $shiftnum 5)" 5
bind_move "${mod}$(char_at $shiftnum 6)" 6
bind_move "${mod}$(char_at $shiftnum 7)" 7
bind_move "${mod}$(char_at $shiftnum 8)" 8
bind_move "${mod}$(char_at $shiftnum 9)" 9

# The mapping of Alt + 0 and Alt + Shift + 0 depends on `base-index`.
# It can either refer to workspace number 0 or workspace number 10.
if [ "$(tmux show-option -gv base-index)" = "1" ]
then
	bind_switch "${mod}0" 10
	bind_move   "${mod}$(char_at "$shiftnum" 10)" 10
else
	bind_switch "${mod}0" 0
	bind_move   "${mod}$(char_at "$shiftnum" 10)" 0
fi

# Switch layout with Alt + <mnemonic key>. The mnemonics are `s` and `S` for
# layouts Vim would generate with `:split`, and `v` and `V` for `:vsplit`.
# The remaining mappings based on `z` and `t` should be quite obvious.
bind_layout "${mod}s" 'main-horizontal'
bind_layout "${mod}S" 'even-vertical'
bind_layout "${mod}v" 'main-vertical'
bind_layout "${mod}V" 'even-horizontal'
bind_layout "${mod}t" 'tiled'
bind_layout "${mod}z" 'zoom'

# Switch to pane via Alt + hjkl.
tmux $bind "${mod}${h}" select-pane -L
tmux $bind "${mod}${j}" select-pane -D
tmux $bind "${mod}${k}" select-pane -U
tmux $bind "${mod}${l}" select-pane -R

# Move a pane via Alt + Shift + hjkl.
if [ -z "$legacy" ]
then
	tmux $bind "${mod}${H}" swap-pane -s '{left-of}'
	tmux $bind "${mod}${J}" swap-pane -s '{down-of}'
	tmux $bind "${mod}${K}" swap-pane -s '{up-of}'
	tmux $bind "${mod}${L}" swap-pane -s '{right-of}'
else
	tmux $bind "${mod}${H}" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -L; tmux swap-pane -t $old'
	tmux $bind "${mod}${J}" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -D; tmux swap-pane -t $old'
	tmux $bind "${mod}${K}" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -U; tmux swap-pane -t $old'
	tmux $bind "${mod}${L}" run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -R; tmux swap-pane -t $old'
fi
## end tilish




run '~/.tmux/plugins/tpm/tpm'
